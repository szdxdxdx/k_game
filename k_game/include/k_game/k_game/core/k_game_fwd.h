#ifndef K_GAME_FWD_H
#define K_GAME_FWD_H

/**
 * \brief 图片资源
 *
 */
struct k_image;

/**
 * \brief 字体资源
 *
 */
struct k_font;

/**
 * \brief 音乐资源
 *
 */
struct k_sound_bgm;

/**
 * \brief 音效资源
 *
 */
struct k_sound_sfx;

/**
 * \brief 精灵
 *
 * 精灵可以是一张静态图片，或是一组连续的动画帧，
 * 用来表示游戏中的各种可见元素，例如：角色、敌人、道具等。
 */
struct k_sprite;

/**
 * \brief 房间
 *
 * 房间是运行游戏的场所，它承载游戏内容、组织对象、调度逻辑，并定义玩家所处的游戏环境。
 * 在不同游戏框架或引擎中，这一概念可能被称作世界，或是场景。
 */
struct k_room;

/**
 * \brief 对象
 *
 * 对象是游戏中会发生动作的实体，它们拥有自己的属性和行为。
 * 对象只能处于房间之内，不能独立于房间而存在。
 *
 * 你在游戏中看到的绝大多数东西都是对象。
 * 例如，《飞机大战》中，玩家角色、敌人、子弹、障碍物、金币等都可以是对象，
 * 玩家控制的飞机对象有移动、射击等行为，而敌人对象则可能有巡逻、攻击、被击毁等行为。
 *
 * 大多数情况下，对象使用精灵作为自己的外观表现，使得它们能被看见。
 * 当然也有一些对象没有外观，它们仅用于控制游戏的运作。
 */
struct k_object;

/**
 * \brief 组件
 *
 * 组件用于为对象的增加行为、赋予新功能。组件必须附着在对象上，不能独立于对象存在。
 *
 * 每个对象的设计与实现往往取决于游戏本身的业务逻辑，而每种组件则是一套行为逻辑的封装。
 * 组件是独立通用的，不依赖特定的对象。对象可以有自身行为，也可以通过挂载组件来增加新的行为。
 *
 * 例如《飞机大战》中的飞机，既可以把移动的逻辑写在飞机对象的事件回调中，亦可给飞机对象挂载一个移动组件。
 * 移动组件也有自己的事件回调，只负责根据速度更新位置，而不在乎绑定的对象是飞机对象，或是其他什么对象。
 */
struct k_component;

/**
 * \brief 组件类型
 *
 * 组件类型定义了组件实例要遵循的行为。
 */
struct k_component_type;

struct k_component_manager;

/**
 * \brief 事件回调
 *
 * k_game 将一个游戏过程划分为多个阶段，每个阶段都有相应的事件类型，开发者可针对不同事件注册对应的回调。
 */
struct k_callback;

/** \brief 表示一个点坐标 */
struct k_float_point {
    float x;
    float y;
};

/** \brief 表示一个矩形结构，`(x, y)` 为矩形左上角的坐标，`w` 和 `h` 为宽和高 */
struct k_int_rect {
    int x;
    int y;
    int w;
    int h;
};

/** \brief 表示一个矩形结构，`(x, y)` 为矩形左上角的坐标，`w` 和 `h` 为宽和高 */
struct k_float_rect {
    float x;
    float y;
    float w;
    float h;
};

#endif
